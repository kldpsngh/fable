{"version":3,"file":"main.js","mappings":"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","sources":["webpack://fable/./app.ts","webpack://fable/./config/database.ts","webpack://fable/./config/envVariable.ts","webpack://fable/./controllers/index.ts","webpack://fable/./databases/logHistory.ts","webpack://fable/./databases/redis.ts","webpack://fable/./models/pgsql/LogHistory.ts","webpack://fable/./models/pgsql/LogHistory20222.ts","webpack://fable/./models/pgsql/LogHistory20222Default.ts","webpack://fable/./models/pgsql/LogHistory20222Login.ts","webpack://fable/./models/pgsql/LogHistory20222Logout.ts","webpack://fable/./models/pgsql/LogHistory20231.ts","webpack://fable/./models/pgsql/LogHistory20231Default.ts","webpack://fable/./models/pgsql/LogHistory20231Login.ts","webpack://fable/./models/pgsql/LogHistory20231Logout.ts","webpack://fable/./models/pgsql/SequelizeMetum.ts","webpack://fable/./models/pgsql/init-models.ts","webpack://fable/./routes/index.ts","webpack://fable/./services/logService.ts","webpack://fable/external commonjs \"dotenv\"","webpack://fable/external commonjs \"express\"","webpack://fable/external commonjs \"moment\"","webpack://fable/external commonjs \"redis\"","webpack://fable/external commonjs \"reflect-metadata\"","webpack://fable/external commonjs \"sequelize\"","webpack://fable/external commonjs \"source-map-support/register\"","webpack://fable/external commonjs \"typedi\"","webpack://fable/external commonjs \"uuid\"","webpack://fable/external node-commonjs \"fs\"","webpack://fable/external node-commonjs \"path\"","webpack://fable/webpack/bootstrap","webpack://fable/webpack/before-startup","webpack://fable/webpack/startup","webpack://fable/webpack/after-startup"],"sourcesContent":["import \"reflect-metadata\";\nimport \"source-map-support/register\";\nimport express from \"express\";\nimport { Container } from \"typedi\";\nimport fs from \"fs\";\nimport path from \"path\";\nconst app = express();\napp.use(express.json({ limit: \"500mb\" }));\napp.use(express.urlencoded({ extended: true }));\nimport { EnvironmentVariables } from \"./config/envVariable\";\nimport { LogService } from \"./services/logService\";\nimport routes from \"./routes\";\nconst PORT = Container.get(EnvironmentVariables).PORT;\napp.use(\"/fable\", routes);\napp.listen(PORT, () => {\n    console.log(`Server started on PORT ${PORT}`);\n});\n//Make logs directory\nlet logDirectory = path.join(__dirname, \"/tempLogs\");\nif (!fs.existsSync(logDirectory)) fs.mkdirSync(logDirectory);\n//start consumer as well .\nContainer.get(LogService).logConsumer();\nexport default app;\n","import { initModels } from \"../models/pgsql/init-models\";\nimport { Sequelize } from \"sequelize\";\nimport { Service } from \"typedi\";\nimport { EnvironmentVariables } from \"./envVariable\";\nimport { createClient } from \"redis\";\n\n@Service()\nexport class DatabaseModels {\n    dbModels;\n    sequelize;\n    redisConnection;\n    constructor(private readonly ENV_VARIABLES: EnvironmentVariables) {\n        this.sequelize = new Sequelize(this.ENV_VARIABLES.DB_NAME, this.ENV_VARIABLES.DB_USER, this.ENV_VARIABLES.DB_PASS, {\n            host: this.ENV_VARIABLES.DB_HOST,\n            port: this.ENV_VARIABLES.DB_PORT,\n            dialect: \"postgres\",\n            logging: false\n        });\n        this.dbModels = initModels(this.sequelize);\n        this.redisConnection = createClient({\n            url: `redis://${this.ENV_VARIABLES.REDIS_HOST}:${this.ENV_VARIABLES.REDIS_PORT}`\n        })\n            .on(\"connect\", () => {\n                console.log(\"Redis Connected\");\n            })\n            .on(\"error\", (err: any) => {\n                console.error(\"Error connecting to redis : \" + err);\n            });\n    }\n}\n","import { config } from \"dotenv\";\nimport { Service } from \"typedi\";\n\n@Service()\nexport class EnvironmentVariables {\n    NODE_ENV: \"development\" | \"staging\" | \"staging_prod\" | \"main\";\n    DB_USER: string;\n    DB_PASS: string;\n    DB_NAME: string;\n    DB_HOST: string;\n    DB_PORT: number;\n    TIMEZONE: string;\n    PORT: number;\n    REDIS_HOST: string;\n    REDIS_PORT: number;\n    CONSUMER_TIME_INTERVAL: number;\n    FILE_READ_PER_INTERVAL: number;\n    constructor() {\n        config();\n        this.NODE_ENV = process.env.NODE_ENV || (\"development\" as any);\n        this.DB_USER = process.env.DB_USER as string;\n        this.DB_PASS = process.env.DB_PASS as string;\n        this.DB_NAME = process.env.DB_NAME as string;\n        this.DB_HOST = process.env.DB_HOST as string;\n        this.DB_PORT = Number(process.env.DB_PORT || \"5432\");\n        this.TIMEZONE = (process.env.TIMEZONE as string) || \"Asia/Kolkata\";\n        this.PORT = Number(process.env.PORT || \"8000\");\n        this.REDIS_HOST = process.env.REDIS_HOST || \"localhost\";\n        this.REDIS_PORT = Number(process.env.REDIS_PORT || \"63790\");\n        this.CONSUMER_TIME_INTERVAL = Number(process.env.CONSUMER_TIME_INTERVAL || \"3000\"); //in ms. 5 mins.\n        this.FILE_READ_PER_INTERVAL = Number(process.env.FILE_READ_PER_INTERVAL || \"20\"); //this can be increased...\n    }\n}\n","import { Request, Response } from \"express\";\nimport { Container } from \"typedi\";\nimport { LogService } from \"../services/logService\";\nimport { LogRequest } from \"../models/logRequest\";\n\nexport async function processLog(req: Request, res: Response) {\n    try {\n        if (!req.body) return res.status(400).send(\"Bad Request\"); // can use joi for checking valid request and it's paramters ...\n        await Container.get(LogService).saveLog(req.body as LogRequest);\n        res.status(201).send(\"Saved\");\n    } catch (ex) {\n        console.error(ex);\n        //logging to s3 or elk ...\n        return res.sendStatus(500);\n    }\n}\n","import { Service } from \"typedi\";\nimport { DatabaseModels } from \"../config/database\";\nimport { LogHistoryCreationAttributes } from \"../models/pgsql/LogHistory\";\nimport { Transaction } from \"sequelize\";\n\n@Service()\nexport class LogHistoryDatabase {\n    private logHistoryModel;\n\n    constructor(private readonly db: DatabaseModels) {\n        this.logHistoryModel = this.db.dbModels.LogHistory;\n    }\n\n    save(logData: LogHistoryCreationAttributes) {\n        return this.logHistoryModel.create(logData);\n    }\n\n    bulkSave(logData: LogHistoryCreationAttributes[], transaction: Transaction) {\n        return this.logHistoryModel.bulkCreate(logData, {\n            transaction\n        });\n    }\n\n    getTransaction() {\n        return this.db.sequelize.transaction();\n    }\n}\n","import { Service } from \"typedi\";\nimport { DatabaseModels } from \"../config/database\";\nimport moment from \"moment\";\n\n@Service()\nexport class RedisDatabase {\n    private redisConnection;\n    constructor(private readonly db: DatabaseModels) {\n        this.redisConnection = this.db.redisConnection;\n    }\n\n    async readData(key: string) {\n        return new Promise<any>((resolve, reject) => {\n            this.redisConnection.get(key, (err, data) => {\n                if (err) {\n                    return reject(err);\n                } else {\n                    try {\n                        return resolve(JSON.parse(data!));\n                    } catch (error) {\n                        return resolve(data);\n                    }\n                }\n            });\n        });\n    }\n\n    async writeData(key: string, value: any, expiresAt?: Date) {\n        return new Promise<\"OK\">((resolve, reject) => {\n            if (typeof value !== \"string\") {\n                value = JSON.stringify(value);\n            }\n            this.redisConnection.set(key, value, (err, data) => {\n                if (err) {\n                    return reject(err);\n                } else {\n                    if (expiresAt) {\n                        this.redisConnection.expireat(key, moment(expiresAt).unix());\n                    }\n                    return resolve(data);\n                }\n            });\n        });\n    }\n\n    async deleteKey(key: string) {\n        return new Promise<number>((resolve, reject) => {\n            this.redisConnection.del(key, (err, data) => {\n                if (err) {\n                    return reject(err);\n                } else {\n                    return resolve(data);\n                }\n            });\n        });\n    }\n\n    // 1 for hit , 0 for miss\n    async ifKeyExists(key: string) {\n        return new Promise((resolve, reject) => {\n            this.redisConnection.exists(key, (err, data) => {\n                if (err) reject(err);\n                else resolve(data);\n            });\n        });\n    }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface LogHistoryAttributes {\n  id: string;\n  log_id?: number;\n  created_date: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name: string;\n}\n\nexport type LogHistoryPk = \"id\" | \"created_date\" | \"event_name\";\nexport type LogHistoryId = LogHistory[LogHistoryPk];\nexport type LogHistoryOptionalAttributes = \"log_id\" | \"created_date\" | \"unix_ts\" | \"user_id\";\nexport type LogHistoryCreationAttributes = Optional<LogHistoryAttributes, LogHistoryOptionalAttributes>;\n\nexport class LogHistory extends Model<LogHistoryAttributes, LogHistoryCreationAttributes> implements LogHistoryAttributes {\n  id!: string;\n  log_id?: number;\n  created_date!: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof LogHistory {\n    return LogHistory.init({\n    id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n      primaryKey: true\n    },\n    log_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    created_date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      defaultValue: Sequelize.Sequelize.literal('CURRENT_DATE'),\n      primaryKey: true\n    },\n    unix_ts: {\n      type: DataTypes.BIGINT,\n      allowNull: true\n    },\n    user_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    event_name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'log_history',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface LogHistory20222Attributes {\n  id: string;\n  log_id?: number;\n  created_date: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name: string;\n}\n\nexport type LogHistory20222Pk = \"id\" | \"created_date\" | \"event_name\";\nexport type LogHistory20222Id = LogHistory20222[LogHistory20222Pk];\nexport type LogHistory20222OptionalAttributes = \"log_id\" | \"created_date\" | \"unix_ts\" | \"user_id\";\nexport type LogHistory20222CreationAttributes = Optional<LogHistory20222Attributes, LogHistory20222OptionalAttributes>;\n\nexport class LogHistory20222 extends Model<LogHistory20222Attributes, LogHistory20222CreationAttributes> implements LogHistory20222Attributes {\n  id!: string;\n  log_id?: number;\n  created_date!: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof LogHistory20222 {\n    return LogHistory20222.init({\n    id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n      primaryKey: true\n    },\n    log_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    created_date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      defaultValue: Sequelize.Sequelize.literal('CURRENT_DATE'),\n      primaryKey: true\n    },\n    unix_ts: {\n      type: DataTypes.BIGINT,\n      allowNull: true\n    },\n    user_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    event_name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'log_history_2022_2',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface LogHistory20222DefaultAttributes {\n  id: string;\n  log_id?: number;\n  created_date: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name: string;\n}\n\nexport type LogHistory20222DefaultPk = \"id\" | \"created_date\" | \"event_name\";\nexport type LogHistory20222DefaultId = LogHistory20222Default[LogHistory20222DefaultPk];\nexport type LogHistory20222DefaultOptionalAttributes = \"log_id\" | \"created_date\" | \"unix_ts\" | \"user_id\";\nexport type LogHistory20222DefaultCreationAttributes = Optional<LogHistory20222DefaultAttributes, LogHistory20222DefaultOptionalAttributes>;\n\nexport class LogHistory20222Default extends Model<LogHistory20222DefaultAttributes, LogHistory20222DefaultCreationAttributes> implements LogHistory20222DefaultAttributes {\n  id!: string;\n  log_id?: number;\n  created_date!: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof LogHistory20222Default {\n    return LogHistory20222Default.init({\n    id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n      primaryKey: true\n    },\n    log_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    created_date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      defaultValue: Sequelize.Sequelize.literal('CURRENT_DATE'),\n      primaryKey: true\n    },\n    unix_ts: {\n      type: DataTypes.BIGINT,\n      allowNull: true\n    },\n    user_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    event_name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'log_history_2022_2_default',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface LogHistory20222LoginAttributes {\n  id: string;\n  log_id?: number;\n  created_date: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name: string;\n}\n\nexport type LogHistory20222LoginPk = \"id\" | \"created_date\" | \"event_name\";\nexport type LogHistory20222LoginId = LogHistory20222Login[LogHistory20222LoginPk];\nexport type LogHistory20222LoginOptionalAttributes = \"log_id\" | \"created_date\" | \"unix_ts\" | \"user_id\";\nexport type LogHistory20222LoginCreationAttributes = Optional<LogHistory20222LoginAttributes, LogHistory20222LoginOptionalAttributes>;\n\nexport class LogHistory20222Login extends Model<LogHistory20222LoginAttributes, LogHistory20222LoginCreationAttributes> implements LogHistory20222LoginAttributes {\n  id!: string;\n  log_id?: number;\n  created_date!: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof LogHistory20222Login {\n    return LogHistory20222Login.init({\n    id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n      primaryKey: true\n    },\n    log_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    created_date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      defaultValue: Sequelize.Sequelize.literal('CURRENT_DATE'),\n      primaryKey: true\n    },\n    unix_ts: {\n      type: DataTypes.BIGINT,\n      allowNull: true\n    },\n    user_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    event_name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'log_history_2022_2_login',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface LogHistory20222LogoutAttributes {\n  id: string;\n  log_id?: number;\n  created_date: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name: string;\n}\n\nexport type LogHistory20222LogoutPk = \"id\" | \"created_date\" | \"event_name\";\nexport type LogHistory20222LogoutId = LogHistory20222Logout[LogHistory20222LogoutPk];\nexport type LogHistory20222LogoutOptionalAttributes = \"log_id\" | \"created_date\" | \"unix_ts\" | \"user_id\";\nexport type LogHistory20222LogoutCreationAttributes = Optional<LogHistory20222LogoutAttributes, LogHistory20222LogoutOptionalAttributes>;\n\nexport class LogHistory20222Logout extends Model<LogHistory20222LogoutAttributes, LogHistory20222LogoutCreationAttributes> implements LogHistory20222LogoutAttributes {\n  id!: string;\n  log_id?: number;\n  created_date!: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof LogHistory20222Logout {\n    return LogHistory20222Logout.init({\n    id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n      primaryKey: true\n    },\n    log_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    created_date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      defaultValue: Sequelize.Sequelize.literal('CURRENT_DATE'),\n      primaryKey: true\n    },\n    unix_ts: {\n      type: DataTypes.BIGINT,\n      allowNull: true\n    },\n    user_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    event_name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'log_history_2022_2_logout',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface LogHistory20231Attributes {\n  id: string;\n  log_id?: number;\n  created_date: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name: string;\n}\n\nexport type LogHistory20231Pk = \"id\" | \"created_date\" | \"event_name\";\nexport type LogHistory20231Id = LogHistory20231[LogHistory20231Pk];\nexport type LogHistory20231OptionalAttributes = \"log_id\" | \"created_date\" | \"unix_ts\" | \"user_id\";\nexport type LogHistory20231CreationAttributes = Optional<LogHistory20231Attributes, LogHistory20231OptionalAttributes>;\n\nexport class LogHistory20231 extends Model<LogHistory20231Attributes, LogHistory20231CreationAttributes> implements LogHistory20231Attributes {\n  id!: string;\n  log_id?: number;\n  created_date!: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof LogHistory20231 {\n    return LogHistory20231.init({\n    id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n      primaryKey: true\n    },\n    log_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    created_date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      defaultValue: Sequelize.Sequelize.literal('CURRENT_DATE'),\n      primaryKey: true\n    },\n    unix_ts: {\n      type: DataTypes.BIGINT,\n      allowNull: true\n    },\n    user_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    event_name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'log_history_2023_1',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface LogHistory20231DefaultAttributes {\n  id: string;\n  log_id?: number;\n  created_date: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name: string;\n}\n\nexport type LogHistory20231DefaultPk = \"id\" | \"created_date\" | \"event_name\";\nexport type LogHistory20231DefaultId = LogHistory20231Default[LogHistory20231DefaultPk];\nexport type LogHistory20231DefaultOptionalAttributes = \"log_id\" | \"created_date\" | \"unix_ts\" | \"user_id\";\nexport type LogHistory20231DefaultCreationAttributes = Optional<LogHistory20231DefaultAttributes, LogHistory20231DefaultOptionalAttributes>;\n\nexport class LogHistory20231Default extends Model<LogHistory20231DefaultAttributes, LogHistory20231DefaultCreationAttributes> implements LogHistory20231DefaultAttributes {\n  id!: string;\n  log_id?: number;\n  created_date!: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof LogHistory20231Default {\n    return LogHistory20231Default.init({\n    id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n      primaryKey: true\n    },\n    log_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    created_date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      defaultValue: Sequelize.Sequelize.literal('CURRENT_DATE'),\n      primaryKey: true\n    },\n    unix_ts: {\n      type: DataTypes.BIGINT,\n      allowNull: true\n    },\n    user_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    event_name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'log_history_2023_1_default',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface LogHistory20231LoginAttributes {\n  id: string;\n  log_id?: number;\n  created_date: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name: string;\n}\n\nexport type LogHistory20231LoginPk = \"id\" | \"created_date\" | \"event_name\";\nexport type LogHistory20231LoginId = LogHistory20231Login[LogHistory20231LoginPk];\nexport type LogHistory20231LoginOptionalAttributes = \"log_id\" | \"created_date\" | \"unix_ts\" | \"user_id\";\nexport type LogHistory20231LoginCreationAttributes = Optional<LogHistory20231LoginAttributes, LogHistory20231LoginOptionalAttributes>;\n\nexport class LogHistory20231Login extends Model<LogHistory20231LoginAttributes, LogHistory20231LoginCreationAttributes> implements LogHistory20231LoginAttributes {\n  id!: string;\n  log_id?: number;\n  created_date!: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof LogHistory20231Login {\n    return LogHistory20231Login.init({\n    id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n      primaryKey: true\n    },\n    log_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    created_date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      defaultValue: Sequelize.Sequelize.literal('CURRENT_DATE'),\n      primaryKey: true\n    },\n    unix_ts: {\n      type: DataTypes.BIGINT,\n      allowNull: true\n    },\n    user_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    event_name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'log_history_2023_1_login',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface LogHistory20231LogoutAttributes {\n  id: string;\n  log_id?: number;\n  created_date: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name: string;\n}\n\nexport type LogHistory20231LogoutPk = \"id\" | \"created_date\" | \"event_name\";\nexport type LogHistory20231LogoutId = LogHistory20231Logout[LogHistory20231LogoutPk];\nexport type LogHistory20231LogoutOptionalAttributes = \"log_id\" | \"created_date\" | \"unix_ts\" | \"user_id\";\nexport type LogHistory20231LogoutCreationAttributes = Optional<LogHistory20231LogoutAttributes, LogHistory20231LogoutOptionalAttributes>;\n\nexport class LogHistory20231Logout extends Model<LogHistory20231LogoutAttributes, LogHistory20231LogoutCreationAttributes> implements LogHistory20231LogoutAttributes {\n  id!: string;\n  log_id?: number;\n  created_date!: string;\n  unix_ts?: number;\n  user_id?: number;\n  event_name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof LogHistory20231Logout {\n    return LogHistory20231Logout.init({\n    id: {\n      type: DataTypes.UUID,\n      allowNull: false,\n      primaryKey: true\n    },\n    log_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    created_date: {\n      type: DataTypes.DATEONLY,\n      allowNull: false,\n      defaultValue: Sequelize.Sequelize.literal('CURRENT_DATE'),\n      primaryKey: true\n    },\n    unix_ts: {\n      type: DataTypes.BIGINT,\n      allowNull: true\n    },\n    user_id: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    event_name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'log_history_2023_1_logout',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\n\nexport interface SequelizeMetumAttributes {\n  name: string;\n}\n\nexport type SequelizeMetumPk = \"name\";\nexport type SequelizeMetumId = SequelizeMetum[SequelizeMetumPk];\nexport type SequelizeMetumCreationAttributes = SequelizeMetumAttributes;\n\nexport class SequelizeMetum extends Model<SequelizeMetumAttributes, SequelizeMetumCreationAttributes> implements SequelizeMetumAttributes {\n  name!: string;\n\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof SequelizeMetum {\n    return SequelizeMetum.init({\n    name: {\n      type: DataTypes.STRING(255),\n      allowNull: false,\n      primaryKey: true\n    }\n  }, {\n    sequelize,\n    tableName: 'SequelizeMeta',\n    schema: 'public',\n    timestamps: false\n  });\n  }\n}\n","import type { Sequelize } from \"sequelize\";\nimport { SequelizeMetum as _SequelizeMetum } from \"./SequelizeMetum\";\nimport type { SequelizeMetumAttributes, SequelizeMetumCreationAttributes } from \"./SequelizeMetum\";\nimport { LogHistory as _LogHistory } from \"./LogHistory\";\nimport type { LogHistoryAttributes, LogHistoryCreationAttributes } from \"./LogHistory\";\nimport { LogHistory20222 as _LogHistory20222 } from \"./LogHistory20222\";\nimport type { LogHistory20222Attributes, LogHistory20222CreationAttributes } from \"./LogHistory20222\";\nimport { LogHistory20222Default as _LogHistory20222Default } from \"./LogHistory20222Default\";\nimport type { LogHistory20222DefaultAttributes, LogHistory20222DefaultCreationAttributes } from \"./LogHistory20222Default\";\nimport { LogHistory20222Login as _LogHistory20222Login } from \"./LogHistory20222Login\";\nimport type { LogHistory20222LoginAttributes, LogHistory20222LoginCreationAttributes } from \"./LogHistory20222Login\";\nimport { LogHistory20222Logout as _LogHistory20222Logout } from \"./LogHistory20222Logout\";\nimport type { LogHistory20222LogoutAttributes, LogHistory20222LogoutCreationAttributes } from \"./LogHistory20222Logout\";\nimport { LogHistory20231 as _LogHistory20231 } from \"./LogHistory20231\";\nimport type { LogHistory20231Attributes, LogHistory20231CreationAttributes } from \"./LogHistory20231\";\nimport { LogHistory20231Default as _LogHistory20231Default } from \"./LogHistory20231Default\";\nimport type { LogHistory20231DefaultAttributes, LogHistory20231DefaultCreationAttributes } from \"./LogHistory20231Default\";\nimport { LogHistory20231Login as _LogHistory20231Login } from \"./LogHistory20231Login\";\nimport type { LogHistory20231LoginAttributes, LogHistory20231LoginCreationAttributes } from \"./LogHistory20231Login\";\nimport { LogHistory20231Logout as _LogHistory20231Logout } from \"./LogHistory20231Logout\";\nimport type { LogHistory20231LogoutAttributes, LogHistory20231LogoutCreationAttributes } from \"./LogHistory20231Logout\";\n\nexport {\n  _SequelizeMetum as SequelizeMetum,\n  _LogHistory as LogHistory,\n  _LogHistory20222 as LogHistory20222,\n  _LogHistory20222Default as LogHistory20222Default,\n  _LogHistory20222Login as LogHistory20222Login,\n  _LogHistory20222Logout as LogHistory20222Logout,\n  _LogHistory20231 as LogHistory20231,\n  _LogHistory20231Default as LogHistory20231Default,\n  _LogHistory20231Login as LogHistory20231Login,\n  _LogHistory20231Logout as LogHistory20231Logout,\n};\n\nexport type {\n  SequelizeMetumAttributes,\n  SequelizeMetumCreationAttributes,\n  LogHistoryAttributes,\n  LogHistoryCreationAttributes,\n  LogHistory20222Attributes,\n  LogHistory20222CreationAttributes,\n  LogHistory20222DefaultAttributes,\n  LogHistory20222DefaultCreationAttributes,\n  LogHistory20222LoginAttributes,\n  LogHistory20222LoginCreationAttributes,\n  LogHistory20222LogoutAttributes,\n  LogHistory20222LogoutCreationAttributes,\n  LogHistory20231Attributes,\n  LogHistory20231CreationAttributes,\n  LogHistory20231DefaultAttributes,\n  LogHistory20231DefaultCreationAttributes,\n  LogHistory20231LoginAttributes,\n  LogHistory20231LoginCreationAttributes,\n  LogHistory20231LogoutAttributes,\n  LogHistory20231LogoutCreationAttributes,\n};\n\nexport function initModels(sequelize: Sequelize) {\n  const SequelizeMetum = _SequelizeMetum.initModel(sequelize);\n  const LogHistory = _LogHistory.initModel(sequelize);\n  const LogHistory20222 = _LogHistory20222.initModel(sequelize);\n  const LogHistory20222Default = _LogHistory20222Default.initModel(sequelize);\n  const LogHistory20222Login = _LogHistory20222Login.initModel(sequelize);\n  const LogHistory20222Logout = _LogHistory20222Logout.initModel(sequelize);\n  const LogHistory20231 = _LogHistory20231.initModel(sequelize);\n  const LogHistory20231Default = _LogHistory20231Default.initModel(sequelize);\n  const LogHistory20231Login = _LogHistory20231Login.initModel(sequelize);\n  const LogHistory20231Logout = _LogHistory20231Logout.initModel(sequelize);\n\n\n  return {\n    SequelizeMetum: SequelizeMetum,\n    LogHistory: LogHistory,\n    LogHistory20222: LogHistory20222,\n    LogHistory20222Default: LogHistory20222Default,\n    LogHistory20222Login: LogHistory20222Login,\n    LogHistory20222Logout: LogHistory20222Logout,\n    LogHistory20231: LogHistory20231,\n    LogHistory20231Default: LogHistory20231Default,\n    LogHistory20231Login: LogHistory20231Login,\n    LogHistory20231Logout: LogHistory20231Logout,\n  };\n}\n","import { Router } from \"express\";\nconst router = Router();\nimport { processLog } from \"../controllers\";\n\nrouter.get(\"/server-alive\", (req, res) => {\n    res.status(200).send(\"It's alive\");\n});\n\nrouter.post(\"/log\", processLog);\nexport default router;\n","import { Service } from \"typedi\";\nimport { LogRequest } from \"../models/logRequest\";\nimport { v4 as uuid } from \"uuid\";\nimport { LogHistoryDatabase } from \"../databases/logHistory\";\nimport { RedisDatabase } from \"../databases/redis\";\nimport { EnvironmentVariables } from \"../config/envVariable\";\nimport { LogHistoryCreationAttributes } from \"../models/pgsql/LogHistory\";\nimport {Transaction} from \"sequelize\";\nimport fs from \"fs\";\nimport path from \"path\";\n\n@Service()\nexport class LogService {\n    constructor(\n        private readonly logHistoryDatabase: LogHistoryDatabase,\n        private readonly redisDatabase: RedisDatabase,\n        private readonly envVariables: EnvironmentVariables\n    ) {}\n    async saveLog(logData: LogRequest) {\n        let id = uuid();\n        let filePath = path.join(__dirname, `/tempLogs/${id}.json`);\n        let logObject = {\n            log_id: logData.id,\n            unix_ts: logData.unix_ts,\n            user_id: logData.user_id,\n            event_name: logData.event_name,\n            id: id\n        };\n        await this.redisDatabase.writeData(filePath, \"1\");\n        //in case of server crash , we can setup expiry in keys ...\n        await new Promise((resolve, reject) => {\n            fs.writeFile(filePath, JSON.stringify(logObject), async (err) => {\n                if (err) return reject(err);\n                console.log(`File Written Successfully = ${filePath}`);\n                await this.redisDatabase.deleteKey(filePath);\n                resolve(true);\n            });\n        });\n    }\n\n    async logConsumer() {\n        console.log(\"Starting consumer\");\n        setInterval(async () => {\n            await this.processInBatch();\n        }, this.envVariables.CONSUMER_TIME_INTERVAL);\n    }\n\n    async processInBatch() {\n        console.log(\"Running batch processor\");\n        let trx: Transaction | null = null;\n        try {\n            //read all files from directory\n            let directoryPath = path.join(__dirname, \"/tempLogs\");\n            let allFiles: string[] = await new Promise(async (resolve, reject) => {\n                fs.readdir(directoryPath, (err, files) => {\n                    if (err) reject(err);\n                    else resolve(files);\n                });\n            });\n            while (allFiles.length > 0) {\n                //isme files read kr .. and db me entry kr ...\n                let files = allFiles.splice(0, this.envVariables.FILE_READ_PER_INTERVAL);\n                let promiseArr: any = [];\n                let logData: LogHistoryCreationAttributes[] = [];\n                let filesToBeDeleted : string[] = [];\n                //need to use await convert to traditional loop ...\n\n                for(let i = 0; i < files.length; i++){\n                    let file = files[i];\n                    let filePath = path.join(directoryPath, file);\n                    if(await this.redisDatabase.ifKeyExists(file.split('.')[0]) === 1)\n                        return;\n                    promiseArr.push(\n                        new Promise((resolve, reject) => {\n                            fs.readFile(filePath, \"utf8\", (err, data) => {\n                                if (err) reject(err);\n                                else resolve({filePath: filePath, data : JSON.parse(data)});\n                            });\n                        })\n                    );\n                }\n\n                let results = await Promise.allSettled(promiseArr);\n                results.forEach((result) => {\n                    if (result.status === \"fulfilled\") {\n                        logData.push(result.value.data);\n                        filesToBeDeleted.push(result.value.filePath);\n                    } else if (result.status === \"rejected\") {\n                        console.error(\"Error:\", result.reason);\n                    }\n                });\n                // use transaction here .. wait until successfull files have been deleted and then commit the transaction ...\n                trx = await this.logHistoryDatabase.getTransaction();\n                if(logData.length > 0)\n                    await this.logHistoryDatabase.bulkSave(logData, trx!);\n                //those files need to be deleted ...\n                let fileDeletePromises : any = [];\n                filesToBeDeleted.forEach((filePath) => {\n                    fileDeletePromises.push(\n                        new Promise((resolve,reject) => {\n                            fs.unlink(filePath,(err) => {\n                                if(err)\n                                    return reject(err);\n                                resolve(true);\n                            });\n                        })\n                    )\n                });\n                await Promise.all(fileDeletePromises);\n                //commit transaction here ....\n                await trx?.commit();\n            }\n        } catch (ex) {\n            await trx?.rollback();\n            console.error(ex);\n            //logging to s3 or elk ...\n        }\n    }\n}\n","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"moment\");","module.exports = require(\"redis\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"sequelize\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"typedi\");","module.exports = require(\"uuid\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./app.ts\");\n",""],"names":[],"sourceRoot":""}